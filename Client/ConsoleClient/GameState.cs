// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comms/GameState.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from comms/GameState.proto</summary>
public static partial class GameStateReflection {

  #region Descriptor
  /// <summary>File descriptor for comms/GameState.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GameStateReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChVjb21tcy9HYW1lU3RhdGUucHJvdG8iIQoRSGVsbG9Xb3JsZFJlcXVlc3QS",
          "DAoEbmFtZRgBIAEoCSIlChJIZWxsb1dvcmxkUmVzcG9uc2USDwoHbWVzc2Fn",
          "ZRgBIAEoCSIVChNJbml0aWFsU3RhdGVSZXF1ZXN0Ik4KFkluaXRpYWxpc2F0",
          "aW9uUmVzcG9uc2USEQoJcGxheWVyX2lkGAEgASgJEiEKDWluaXRpYWxfc3Rh",
          "dGUYAiABKAsyCi5HYW1lU3RhdGUiXgoJR2FtZVN0YXRlEhMKC3R1cm5fbnVt",
          "YmVyGAEgASgDEhQKDHBsYXllcl9tb25leRgCIAEoAxITCgRoYW5kGAMgAygL",
          "MgUuQ2FyZBIRCglkZWNrX3NpemUYBCABKAMiFQoEQ2FyZBINCgVpbmRleBgB",
          "IAEoAzKKAQoLR2FtZVNlcnZpY2USNQoKSGVsbG9Xb3JsZBISLkhlbGxvV29y",
          "bGRSZXF1ZXN0GhMuSGVsbG9Xb3JsZFJlc3BvbnNlEkQKE0dldEluaXRpYWxH",
          "YW1lU3RhdGUSFC5Jbml0aWFsU3RhdGVSZXF1ZXN0GhcuSW5pdGlhbGlzYXRp",
          "b25SZXNwb25zZWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::HelloWorldRequest), global::HelloWorldRequest.Parser, new[]{ "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HelloWorldResponse), global::HelloWorldResponse.Parser, new[]{ "Message" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InitialStateRequest), global::InitialStateRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InitialisationResponse), global::InitialisationResponse.Parser, new[]{ "PlayerId", "InitialState" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameState), global::GameState.Parser, new[]{ "TurnNumber", "PlayerMoney", "Hand", "DeckSize" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Card), global::Card.Parser, new[]{ "Index" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class HelloWorldRequest : pb::IMessage<HelloWorldRequest> {
  private static readonly pb::MessageParser<HelloWorldRequest> _parser = new pb::MessageParser<HelloWorldRequest>(() => new HelloWorldRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HelloWorldRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameStateReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HelloWorldRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HelloWorldRequest(HelloWorldRequest other) : this() {
    name_ = other.name_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HelloWorldRequest Clone() {
    return new HelloWorldRequest(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HelloWorldRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HelloWorldRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HelloWorldRequest other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class HelloWorldResponse : pb::IMessage<HelloWorldResponse> {
  private static readonly pb::MessageParser<HelloWorldResponse> _parser = new pb::MessageParser<HelloWorldResponse>(() => new HelloWorldResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HelloWorldResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameStateReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HelloWorldResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HelloWorldResponse(HelloWorldResponse other) : this() {
    message_ = other.message_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HelloWorldResponse Clone() {
    return new HelloWorldResponse(this);
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 1;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HelloWorldResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HelloWorldResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Message != other.Message) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Message.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Message);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HelloWorldResponse other) {
    if (other == null) {
      return;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class InitialStateRequest : pb::IMessage<InitialStateRequest> {
  private static readonly pb::MessageParser<InitialStateRequest> _parser = new pb::MessageParser<InitialStateRequest>(() => new InitialStateRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InitialStateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameStateReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitialStateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitialStateRequest(InitialStateRequest other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitialStateRequest Clone() {
    return new InitialStateRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InitialStateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InitialStateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InitialStateRequest other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class InitialisationResponse : pb::IMessage<InitialisationResponse> {
  private static readonly pb::MessageParser<InitialisationResponse> _parser = new pb::MessageParser<InitialisationResponse>(() => new InitialisationResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InitialisationResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameStateReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitialisationResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitialisationResponse(InitialisationResponse other) : this() {
    playerId_ = other.playerId_;
    InitialState = other.initialState_ != null ? other.InitialState.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitialisationResponse Clone() {
    return new InitialisationResponse(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private string playerId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerId {
    get { return playerId_; }
    set {
      playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "initial_state" field.</summary>
  public const int InitialStateFieldNumber = 2;
  private global::GameState initialState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GameState InitialState {
    get { return initialState_; }
    set {
      initialState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InitialisationResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InitialisationResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(InitialState, other.InitialState)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
    if (initialState_ != null) hash ^= InitialState.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerId);
    }
    if (initialState_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(InitialState);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
    }
    if (initialState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialState);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InitialisationResponse other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId.Length != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.initialState_ != null) {
      if (initialState_ == null) {
        initialState_ = new global::GameState();
      }
      InitialState.MergeFrom(other.InitialState);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          PlayerId = input.ReadString();
          break;
        }
        case 18: {
          if (initialState_ == null) {
            initialState_ = new global::GameState();
          }
          input.ReadMessage(initialState_);
          break;
        }
      }
    }
  }

}

public sealed partial class GameState : pb::IMessage<GameState> {
  private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GameState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameStateReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameState(GameState other) : this() {
    turnNumber_ = other.turnNumber_;
    playerMoney_ = other.playerMoney_;
    hand_ = other.hand_.Clone();
    deckSize_ = other.deckSize_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameState Clone() {
    return new GameState(this);
  }

  /// <summary>Field number for the "turn_number" field.</summary>
  public const int TurnNumberFieldNumber = 1;
  private long turnNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TurnNumber {
    get { return turnNumber_; }
    set {
      turnNumber_ = value;
    }
  }

  /// <summary>Field number for the "player_money" field.</summary>
  public const int PlayerMoneyFieldNumber = 2;
  private long playerMoney_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerMoney {
    get { return playerMoney_; }
    set {
      playerMoney_ = value;
    }
  }

  /// <summary>Field number for the "hand" field.</summary>
  public const int HandFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Card> _repeated_hand_codec
      = pb::FieldCodec.ForMessage(26, global::Card.Parser);
  private readonly pbc::RepeatedField<global::Card> hand_ = new pbc::RepeatedField<global::Card>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Card> Hand {
    get { return hand_; }
  }

  /// <summary>Field number for the "deck_size" field.</summary>
  public const int DeckSizeFieldNumber = 4;
  private long deckSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DeckSize {
    get { return deckSize_; }
    set {
      deckSize_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GameState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GameState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TurnNumber != other.TurnNumber) return false;
    if (PlayerMoney != other.PlayerMoney) return false;
    if(!hand_.Equals(other.hand_)) return false;
    if (DeckSize != other.DeckSize) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TurnNumber != 0L) hash ^= TurnNumber.GetHashCode();
    if (PlayerMoney != 0L) hash ^= PlayerMoney.GetHashCode();
    hash ^= hand_.GetHashCode();
    if (DeckSize != 0L) hash ^= DeckSize.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TurnNumber != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(TurnNumber);
    }
    if (PlayerMoney != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(PlayerMoney);
    }
    hand_.WriteTo(output, _repeated_hand_codec);
    if (DeckSize != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(DeckSize);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TurnNumber != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TurnNumber);
    }
    if (PlayerMoney != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerMoney);
    }
    size += hand_.CalculateSize(_repeated_hand_codec);
    if (DeckSize != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckSize);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GameState other) {
    if (other == null) {
      return;
    }
    if (other.TurnNumber != 0L) {
      TurnNumber = other.TurnNumber;
    }
    if (other.PlayerMoney != 0L) {
      PlayerMoney = other.PlayerMoney;
    }
    hand_.Add(other.hand_);
    if (other.DeckSize != 0L) {
      DeckSize = other.DeckSize;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TurnNumber = input.ReadInt64();
          break;
        }
        case 16: {
          PlayerMoney = input.ReadInt64();
          break;
        }
        case 26: {
          hand_.AddEntriesFrom(input, _repeated_hand_codec);
          break;
        }
        case 32: {
          DeckSize = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class Card : pb::IMessage<Card> {
  private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Card> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameStateReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Card() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Card(Card other) : this() {
    index_ = other.index_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Card Clone() {
    return new Card(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private long index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Card);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Card other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0L) hash ^= Index.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Index);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Index);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Card other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0L) {
      Index = other.Index;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Index = input.ReadInt64();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
